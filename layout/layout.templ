package layout

import (
	"fiatjaf.com/nostr"

	"github.com/fiatjaf/pyramid/global"
	"github.com/fiatjaf/pyramid/pyramid"
)

templ Layout(loggedUser nostr.PubKey, currentPage string) {
	<!DOCTYPE html>
	<html
		if global.Settings.HasThemeColors() {
			style={ templ.SafeCSS("--accent-color:" + global.Settings.Theme.AccentColor + ";" +
				"--bg-color:" + global.Settings.Theme.BackgroundColor + ";" +
				"--text-color:" + global.Settings.Theme.TextColor + ";") }
		} else {
			x-data="{ darkMode: localStorage.getItem('darkMode') === 'true' }"
			x-init="$watch('darkMode', val => localStorage.setItem('darkMode', val))"
			:class="{ 'dark': darkMode }"
		}
	>
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>{ global.Settings.RelayName }</title>
			<script src="https://cdn.tailwindcss.com"></script>
			<script>tailwind.config = { darkMode: 'class' }</script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			<script src="https://cdn.jsdelivr.net/npm/nostr-web-components@0.0.12/dist/nostr-name.js"></script>
		</head>
		<body
			class={ "min-h-screen flex flex-col",
			templ.KV("bg-[var(--bg-color)]", global.Settings.HasThemeColors()),
			templ.KV("bg-stone-50 dark:bg-stone-900 text-stone-900 dark:text-stone-100", !global.Settings.HasThemeColors()) }
		>
			<header class="bg-white/60 dark:bg-stone-800/90 backdrop-blur-sm sticky top-0 z-50 shadow-sm border-b border-stone-300">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex items-center justify-between py-6">
						if global.Settings.RelayIcon != "" {
							<a href="/">
								<img class="h-12 mr-4" src={ global.Settings.RelayIcon }/>
							</a>
						}
						<div class="flex-1 mr-auto">
							<a href="/">
								<h1
									class={
										"font-bold text-3xl",
										templ.KV("text-[var(--accent-color)]", global.Settings.HasThemeColors()),
										templ.KV("text-blue-600 dark:text-blue-400", !global.Settings.HasThemeColors()),
									}
								>{ global.Settings.RelayName }</h1>
							</a>
							if global.Settings.RelayDescription != "" {
								<p class="text-sm text-stone-600 dark:text-stone-400">
									<a href="/">
										{ global.Settings.RelayDescription }
									</a>
								</p>
							}
						</div>
						if !global.Settings.HasThemeColors() {
							<button @click="darkMode = !darkMode" class="ml-auto p-2.5 rounded-lg bg-stone-100 hover:bg-stone-200 dark:bg-stone-700 dark:hover:bg-stone-600" aria-label="Toggle dark mode">
								<svg x-show="darkMode" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg>
								<svg x-show="!darkMode" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
							</button>
						}
					</div>
					<nav class="flex flex-wrap gap-2 items-center justify-center pb-4">
						<a
							href="/"
							class={
								"rounded-lg px-4 py-2 font-medium",
								templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
								templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
								templ.KV("bg-stone-200 dark:bg-stone-700", currentPage == "invite-tree"),
							}
						>invite tree</a>
						<a
							class={
								"rounded-lg px-4 py-2 font-medium",
								templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
								templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
							}
							target="_blank"
							href={ global.Settings.BrowseURI }
							x-init="$el.href = $el.href.replace('{url}', encodeURIComponent(location.href.replace('http', 'ws').split('/').slice(0, 3).join('/')))"
						>browse</a>
						<div
							x-data="{ open: false }"
							@click.away="open = false"
							class="relative"
						>
							<button
								@click="open = !open"
								class={ "rounded-lg px-4 py-2 font-medium flex items-center gap-1",
									templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
									templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
							templ.KV("bg-stone-200 dark:bg-stone-700", currentPage == "favorites" || currentPage == "uppermost" || currentPage == "popular" || currentPage == "inbox" || currentPage == "internal" || currentPage == "groups" || currentPage == "moderated"),
							templ.KV("hidden", !pyramid.IsRoot(loggedUser) && !global.Settings.Favorites.Enabled && !global.Settings.Uppermost.Enabled && !global.Settings.Popular.Enabled && !global.Settings.Inbox.Enabled && !(global.Settings.Internal.Enabled && pyramid.IsMember(loggedUser)) && !global.Settings.Groups.Enabled && !global.Settings.Moderated.Enabled) }
							>
								if currentPage == "favorites" {
									favorites
								} else if currentPage == "uppermost" {
									uppermost
								} else if currentPage == "popular" {
									popular
								} else if currentPage == "inbox" {
									inbox
								} else if currentPage == "internal" {
									internal
								} else if currentPage == "groups" {
									groups
								} else if currentPage == "moderated" {
									moderated
								} else {
									relays
								}
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
								</svg>
							</button>
							<div
								x-show="open"
								x-transition
								class="absolute left-0 mt-2 w-48 bg-white dark:bg-stone-800 rounded-lg shadow-lg border border-stone-200 dark:border-stone-700 py-1 z-50"
							>
								if global.Settings.Favorites.Enabled || pyramid.IsRoot(loggedUser) {
									<a
										href="/favorites/"
										class={
											"block px-4 py-2 text-sm",
											templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
											templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
											templ.KV("bg-stone-100 dark:bg-stone-700", currentPage == "favorites"),
										}
									>favorites</a>
								}
								if global.Settings.Uppermost.Enabled || pyramid.IsRoot(loggedUser) {
									<a
										href="/uppermost/"
										class={
											"block px-4 py-2 text-sm",
											templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
											templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
											templ.KV("bg-stone-100 dark:bg-stone-700", currentPage == "uppermost"),
										}
									>uppermost</a>
								}
								if global.Settings.Popular.Enabled || pyramid.IsRoot(loggedUser) {
									<a
										href="/popular/"
										class={
											"block px-4 py-2 text-sm",
											templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
											templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
											templ.KV("bg-stone-100 dark:bg-stone-700", currentPage == "popular"),
										}
									>popular</a>
								}
								if global.Settings.Inbox.Enabled || pyramid.IsRoot(loggedUser) {
									<a
										href="/inbox/"
										class={
											"block px-4 py-2 text-sm",
											templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
											templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
											templ.KV("bg-stone-100 dark:bg-stone-700", currentPage == "inbox"),
										}
									>inbox</a>
								}
								if pyramid.IsMember(loggedUser) && global.Settings.Groups.Enabled || pyramid.IsRoot(loggedUser) {
									<a
										href="/internal/"
										class={
											"block px-4 py-2 text-sm",
											templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
											templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
											templ.KV("bg-stone-100 dark:bg-stone-700", currentPage == "internal"),
										}
									>internal</a>
								}
								if global.Settings.Groups.Enabled || pyramid.IsRoot(loggedUser) {
									<a
										href="/groups/"
										class={
											"block px-4 py-2 text-sm",
											templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
											templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
											templ.KV("bg-stone-100 dark:bg-stone-700", currentPage == "groups"),
										}
									>groups</a>
								}
								if global.Settings.Moderated.Enabled || pyramid.IsRoot(loggedUser) {
									<a
										href="/moderated/"
										class={
											"block px-4 py-2 text-sm",
											templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
											templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
											templ.KV("bg-stone-100 dark:bg-stone-700", currentPage == "moderated"),
										}
									>moderated</a>
								}
							</div>
						</div>
						if pyramid.IsMember(loggedUser) {
							<a
								href="/reports"
								class={
									"rounded-lg px-4 py-2 font-medium",
									templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
									templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
									templ.KV("bg-stone-200 dark:bg-stone-700", currentPage == "reports"),
								}
							>reports</a>
						}
						if pyramid.IsRoot(loggedUser) {
							<a
								href="/settings"
								class={
									"rounded-lg px-4 py-2 font-medium",
									templ.KV("text-[var(--text-color)]", global.Settings.HasThemeColors()),
									templ.KV("hover:bg-stone-100 dark:hover:bg-stone-700", !global.Settings.HasThemeColors()),
									templ.KV("bg-stone-200 dark:bg-stone-700", currentPage == "settings"),
								}
							>settings</a>
						}
						<div x-data="authButton()">
							<button
								@click="handleAuth($event)"
								class={
									"px-4 py-2 rounded-lg font-semibold text-white shadow-md hover:shadow-lg",
									templ.KV("bg-[var(--accent-color)]", global.Settings.HasThemeColors()),
									templ.KV("bg-blue-500 hover:bg-blue-600", !global.Settings.HasThemeColors()),
								}
							>
								if loggedUser != nostr.ZeroPK {
									logout
								} else {
									login
								}
							</button>
						</div>
					</nav>
				</div>
			</header>
			<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex-grow">
				{ children... }
			</main>
			<footer class="mt-auto bg-white/50 dark:bg-stone-800/50 backdrop-blur-sm border-t border-stone-300">
				<div class="max-w-7xl mx-auto px-4 py-6 text-center">
					<p class="text-sm text-stone-600 dark:text-stone-400">
						powered by
						<a
							target="_blank"
							href="https://github.com/fiatjaf/pyramid"
							if global.Settings.HasThemeColors() {
								class="text-[var(--accent-color)]"
							} else {
								class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
							}
						>pyramid</a>
					</p>
				</div>
			</footer>
			<script>window.wnjParams = { position: 'bottom', startHidden: true, compactMode: true }</script>
			<script src="https://cdn.jsdelivr.net/npm/window.nostr.js@0.4.7/dist/window.nostr.min.js"></script>
			<script>
				function authButton() {
					return {
						getCookie(name) {
							const value = `; ${document.cookie}`;
							const parts = value.split(`; ${name}=`);
							if (parts.length === 2) return parts.pop().split(';').shift();
						},
						setCookie(name, value) {
							document.cookie = `${name}=${value}; path=/`;
						},
						clearCookie(name) {
							document.cookie = `${name}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT`;
						},
					async handleAuth(event) {
						const isLogin = event.target.innerText.toLowerCase() === 'login';
							if (isLogin) {
								try {
									const event = await window.nostr.signEvent({
										created_at: Math.round(Date.now() / 1000),
										kind: 27235,
										tags: [['domain', location.host]],
										content: ''
									});
									this.setCookie('nip98', btoa(JSON.stringify(event)));
								} catch (e) {
									console.error('login failed:', e);
									return;
								}
							} else {
								this.clearCookie('nip98');
							}
							location.reload();
						}
					}
				}
			</script>
		</body>
	</html>
}
