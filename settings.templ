package main

import (
	"fmt"

	"fiatjaf.com/nostr"

	"github.com/fiatjaf/pyramid/global"
	"github.com/fiatjaf/pyramid/layout"
)

templ settingsPage(loggedUser nostr.PubKey) {
	@layout.Layout(loggedUser, "settings") {
		<div class="max-w-4xl mx-auto">
			<!-- relay metadata -->
			@layout.RelayMetadata("main",
				global.Settings.RelayName, global.Settings.RelayDescription, global.Settings.RelayIcon)
			<!-- theme colors -->
			<form
				method="POST"
				action="/settings"
				class="space-y-6 mt-8"
				x-data={ `{
					accentColor: '`+global.Settings.Theme.AccentColor+`',
					backgroundColor: '`+global.Settings.Theme.BackgroundColor+`',
					textColor: '`+global.Settings.Theme.TextColor+`',
					saved: false,
					updateTheme() {
						document.documentElement.style.setProperty('--accent-color', this.accentColor);
						document.documentElement.style.setProperty('--bg-color', this.backgroundColor);
						document.documentElement.style.setProperty('--text-color', this.textColor);
					},
					saveSettings(event) {
						setTimeout(async () => {
							const response = await fetch(this.$refs.form.action, {
								method: 'POST',
								body: new URLSearchParams(new FormData(this.$refs.form))
							});
							if (response.ok) {
								this.saved = true;
								setTimeout(() => this.saved = false, 2000);
							}
						}, 1)
					},
					resetTheme() {
						this.accentColor = '';
						this.backgroundColor = '';
						this.textColor = '';
						setTimeout(() => this.$refs.form.submit(), 1)
					},
					enableCustomTheme() {
						function gen (baseLight, baseSat) {
							let h = Math.random() * 360
							let s = (baseSat + Math.random() * 10) / 100
							let l = (baseLight + Math.random() * 10) / 100
							const a = s * Math.min(l, 1 - l)
							const f = n => {
								const k = (n + h / 30) % 12
								const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1)
								return Math.round(255 * color).toString(16).padStart(2, '0')
							}
							return "#" + f(0) + f(8) + f(4)
						}

						this.accentColor = gen(60, 80);
						this.backgroundColor = gen(90, 50);
						this.textColor = gen(30, 60);
						setTimeout(() => this.$refs.form.submit(), 1)
					}
				}` }
				x-init="updateTheme()"
				x-ref="form"
			>
				<h3 class="text-lg font-semibold mb-4 dark:text-stone-200">theme colors</h3>
				<div class={ "mb-4", templ.KV("hidden", global.Settings.HasThemeColors()) }>
					<button
						type="button"
						@click.prevent="enableCustomTheme()"
						class="px-6 py-2 rounded-lg font-semibold bg-stone-700 hover:bg-stone-800 dark:bg-stone-600 dark:hover:bg-stone-500 text-white shadow-md hover:shadow-lg"
					>
						enable custom theme
					</button>
				</div>
				<div
					class={
						"grid grid-cols-1 md:grid-cols-3 gap-4",
						templ.KV("hidden", !global.Settings.HasThemeColors()),
					}
				>
					<div>
						<label class="block text-sm font-medium mb-2 dark:text-stone-300">primary color</label>
						<input
							type="color"
							name="accent_color"
							x-model="accentColor"
							@input="updateTheme()"
							@blur="saveSettings()"
							class="w-full h-10 rounded border border-stone-300 cursor-pointer"
						/>
					</div>
					<div>
						<label class="block text-sm font-medium mb-2 dark:text-stone-300">background color</label>
						<input
							type="color"
							name="background_color"
							x-model="backgroundColor"
							@input="updateTheme()"
							@blur="saveSettings()"
							class="w-full h-10 rounded border border-stone-300 cursor-pointer"
						/>
					</div>
					<div>
						<label class="block text-sm font-medium mb-2 dark:text-stone-300">secondary color</label>
						<input
							type="color"
							name="text_color"
							x-model="textColor"
							@input="updateTheme()"
							@blur="saveSettings()"
							class="w-full h-10 rounded border border-stone-300 cursor-pointer"
						/>
					</div>
				</div>
				<div
					class={
						"flex justify-between items-center mt-4",
						templ.KV("hidden", !global.Settings.HasThemeColors()),
					}
				>
					<button
						type="button"
						@click="resetTheme()"
						class="px-4 py-2 rounded bg-stone-200 hover:bg-stone-300 dark:bg-stone-700 dark:hover:bg-stone-600 text-stone-700 dark:text-stone-300 font-medium"
					>
						reset
					</button>
					<div
						x-show="saved"
						x-transition
						class="text-sm text-green-600 dark:text-green-400 font-medium"
					>
						saved!
					</div>
				</div>
			</form>
			<!-- General Settings Section -->
			<form
				method="POST"
				action="/settings"
				class="space-y-6 mt-8"
				x-data={ `{
					maxInvitesPerPerson: ` + fmt.Sprint(global.Settings.MaxInvitesPerPerson) + `,
					requireCurrentTimestamp: ` + fmt.Sprint(global.Settings.RequireCurrentTimestamp) + `,
					browseUri: '` + global.Settings.BrowseURI + `',
					saved: false,
					async saveSettings() {
						const response = await fetch(this.$refs.form.action, {
							method: 'POST',
							body: new URLSearchParams(new FormData(this.$refs.form))
						})
						if (response.ok) {
							this.saved = true;
							setTimeout(() => this.saved = false, 2000)
						}
					}
				}` }
				x-ref="form"
			>
				<h3 class="text-lg font-semibold mb-4 dark:text-stone-200">general</h3>
				<div class="space-y-4">
					<div class="flex items-center">
						<input
							type="checkbox"
							name="require_current_timestamp"
							id="require_current_timestamp"
							class="w-4 h-6 rounded border-stone-300 dark:border-stone-600"
							x-model="requireCurrentTimestamp"
							@change="saveSettings()"
						/>
						<label for="require_current_timestamp" class="ml-2 text-sm font-medium dark:text-stone-300">
							require event timestamps to be current (within Â±60 seconds)
						</label>
					</div>
					<div>
						<label class="block text-sm font-medium mb-2 dark:text-stone-300">max invites per person</label>
						<input
							type="number"
							name="max_invites_per_person"
							min="1"
							class="w-full px-4 py-2 rounded border border-stone-300 dark:border-stone-600 bg-white dark:bg-stone-700 dark:text-stone-100"
							x-model="maxInvitesPerPerson"
							@blur="saveSettings()"
						/>
					</div>
					<div>
						<label class="block text-sm font-medium mb-2 dark:text-stone-300">pattern for the "browse" link</label>
						<div class="flex flex-wrap gap-2 items-center">
							<input
								type="text"
								name="browse_uri"
								class="w-full px-4 py-2 rounded border border-stone-300 dark:border-stone-600 bg-white dark:bg-stone-700 dark:text-stone-100 mb-3"
								x-model="browseUri"
								@blur="saveSettings()"
							/>
							<button
								type="button"
								@mousedown="browseUri = 'https://jumble.social/?r={url}'"
								@mouseup="saveSettings()"
								class="px-3 py-1 text-sm rounded bg-stone-200 hover:bg-stone-300 dark:bg-stone-600 dark:hover:bg-stone-500"
							>
								jumble
							</button>
							<button
								type="button"
								@mousedown="browseUri = 'https://yakihonne.com/r/content?r={url}'"
								@mouseup="saveSettings()"
								class="px-3 py-1 text-sm rounded bg-stone-200 hover:bg-stone-300 dark:bg-stone-600 dark:hover:bg-stone-500"
							>
								yakihonne
							</button>
							<button
								type="button"
								@mousedown="browseUri = 'https://nosotros.app/feed?relay={url}&kind=1&limit=30&type=relayfeed'"
								@mouseup="saveSettings()"
								class="px-3 py-1 text-sm rounded bg-stone-200 hover:bg-stone-300 dark:bg-stone-600 dark:hover:bg-stone-500"
							>
								nosotros
							</button>
							<button
								type="button"
								@mousedown="browseUri = 'https://coracle.social/relays/{url}'"
								@mouseup="saveSettings()"
								class="px-3 py-1 text-sm rounded bg-stone-200 hover:bg-stone-300 dark:bg-stone-600 dark:hover:bg-stone-500"
							>
								coracle
							</button>
						</div>
					</div>
				</div>
				<div
					x-show="saved"
					x-transition
					class="text-sm text-green-600 dark:text-green-400 font-medium"
				>
					saved!
				</div>
			</form>
			<!-- Paywall Settings Section -->
			<form
				method="POST"
				action="/settings"
				class="space-y-6 mt-8"
				x-data={ `{
					paywallTag: '` + fmt.Sprint(global.Settings.Paywall.Tag) + `',
					paywallUpdateOk: '` + fmt.Sprint(global.Settings.Paywall.Tag) + `' === '',
					paywallAmount: ` + fmt.Sprint(global.Settings.Paywall.AmountSats) + `,
					paywallPeriod: '` + fmt.Sprint(global.Settings.Paywall.PeriodDays) + `',
					saved: false,
					async saveSettings() {
						const response = await fetch(this.$refs.form.action, {
							method: 'POST',
							body: new URLSearchParams(new FormData(this.$refs.form))
						})
						if (response.ok) {
							this.saved = true;
							setTimeout(() => this.saved = false, 2000)
						}
					}
				}` }
				x-ref="form"
			>
				<h3 class="text-lg font-semibold mb-4 dark:text-stone-200">paywall</h3>
				<div class="space-x-4 flex space-between">
					<div>
						<label class="block text-sm font-medium mb-2 dark:text-stone-300">hashtag</label>
						<input
							type="text"
							name="paywall_tag"
							placeholder="e.g. 'premium'"
							class="w-full px-4 py-2 rounded border border-stone-300 dark:border-stone-600 bg-white dark:bg-stone-700 dark:text-stone-100"
							x-model="paywallTag"
							@keypress="paywallUpdateOk || (confirm('if you change the hashtag all previous posts using the previous hashtag will become public, continue?') ? paywallUpdateOk = true : $event.preventDefault())"
							@blur="paywallUpdateOk && saveSettings()"
						/>
					</div>
					<div>
						<label class="block text-sm font-medium mb-2 dark:text-stone-300">amount (in satoshis)</label>
						<input
							type="number"
							name="paywall_amount"
							min="0"
							class="w-full px-4 py-2 rounded border border-stone-300 dark:border-stone-600 bg-white dark:bg-stone-700 dark:text-stone-100"
							x-model="paywallAmount"
							@blur="saveSettings()"
						/>
					</div>
					<div>
						<label class="block text-sm font-medium mb-2 dark:text-stone-300">period (in days)</label>
						<input
							type="text"
							name="paywall_period"
							placeholder="90"
							class="w-full px-4 py-2 rounded border border-stone-300 dark:border-stone-600 bg-white dark:bg-stone-700 dark:text-stone-100"
							x-model="paywallPeriod"
							@blur="saveSettings()"
						/>
					</div>
				</div>
				<div
					x-show="saved"
					x-transition
					class="text-sm text-green-600 dark:text-green-400 font-medium"
				>
					saved!
				</div>
			</form>
			<!-- Moderated Relay Settings -->
			<form
				method="POST"
				action="/settings"
				class="space-y-6 mt-8"
				x-data={ `{
					moderatedEnabled: ` + fmt.Sprint(global.Settings.Moderated.Enabled) + `,
					moderatedMinPoW: ` + fmt.Sprint(global.Settings.Moderated.MinPoW) + `,
					saved: false,
					async saveSettings() {
						const response = await fetch(this.$refs.form.action, {
							method: 'POST',
							body: new URLSearchParams(new FormData(this.$refs.form))
						})
						if (response.ok) {
							this.saved = true;
							setTimeout(() => this.saved = false, 2000)
						}
					}
				}` }
				x-ref="form"
			>
				<h3 class="text-lg font-semibold mb-4 dark:text-stone-200">moderated relay</h3>
				<div class="space-y-4">
					<div class="flex items-center">
						<input
							type="checkbox"
							name="moderated_enabled"
							id="moderated_enabled"
							class="w-4 h-6 rounded border-stone-300 dark:border-stone-600"
							x-model="moderatedEnabled"
							@change="saveSettings()"
						/>
						<label for="moderated_enabled" class="ml-2 text-sm font-medium dark:text-stone-300">
							enable moderated relay
						</label>
					</div>
					<div>
						<label class="block text-sm font-medium mb-2 dark:text-stone-300">minimum proof-of-work (bits, 0 to disable)</label>
						<input
							type="number"
							name="moderated_min_pow"
							min="0"
							max="64"
							class="w-full px-4 py-2 rounded border border-stone-300 dark:border-stone-600 bg-white dark:bg-stone-700 dark:text-stone-100"
							x-model="moderatedMinPoW"
							@blur="saveSettings()"
						/>
						<p class="text-xs text-stone-500 dark:text-stone-400 mt-1">
							Requires events to have NIP-13 proof-of-work. Recommended: 16-24 bits for spam prevention.
						</p>
					</div>
				</div>
				<div
					x-show="saved"
					x-transition
					class="text-sm text-green-600 dark:text-green-400 font-medium"
				>
					saved!
				</div>
			</form>
			<!-- cleanup Section -->
			<div class="mt-8">
				<h3 class="text-lg font-semibold dark:text-stone-200 mb-3">cleanup</h3>
				<p class="text-sm text-stone-600 dark:text-stone-400 mb-4">
					permanently delete all events from users not in the pyramid.
				</p>
				<a
					href="/cleanup"
					class="inline-block px-4 py-2 rounded bg-stone-700 hover:bg-stone-800 dark:bg-stone-600 dark:hover:bg-stone-500 text-white font-medium"
					onclick="return confirm('are you sure you want to delete all events from non-members? this cannot be undone.')"
				>
					clear stuff from excluded users
				</a>
			</div>
		</div>
	}
}
