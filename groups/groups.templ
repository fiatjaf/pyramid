package groups

import (
	"fiatjaf.com/nostr"
	"fmt"
	"github.com/fiatjaf/pyramid/global"
)

templ groupsPage(loggedUser nostr.PubKey, state *State) {
	@global.Layout(loggedUser, "groups") {
		<div class="max-w-3xl mx-auto">
			<div class="space-y-4 text-gray-700 dark:text-gray-300">
				<p class="text-lg leading-relaxed">
					the groups relay implements NIP-29: moderated group chat functionality.
				</p>
				<div class="bg-blue-50/50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4">
					<h2 class="font-semibold text-gray-800 dark:text-gray-100 mb-2">how it works:</h2>
					<ul class="list-disc list-inside space-y-1 text-sm">
						<li>members can create groups</li>
						<li>group policies are provided at creation time</li>
						<li>as long as the group creator allows, non-members can join these groups freely</li>
					</ul>
				</div>
			</div>
			if loggedUser == global.Master {
				<div class="mt-8">
					<h3 class="text-lg font-semibold mb-4 dark:text-stone-200">groups configuration</h3>
					if global.Settings.GroupsPrivateKey == "" {
						<p class="text-sm text-stone-600 dark:text-stone-400 mb-4">
							groups functionality is currently disabled. click the button below to generate a secret key and enable groups.
						</p>
						<form method="POST" action="/groups/enable">
							<button
								type="submit"
								class="px-4 py-2 rounded bg-stone-200 hover:bg-stone-300 dark:bg-stone-700 dark:hover:bg-stone-600 text-stone-700 dark:text-stone-300 font-medium"
							>
								enable groups
							</button>
						</form>
					} else {
						<p class="text-sm text-stone-600 dark:text-stone-400">
							groups functionality is enabled.
						</p>
					}
				</div>
			}
			// groups table section
			if state != nil {
				<div class="mt-8">
					<h3 class="text-lg font-semibold mb-4 dark:text-stone-200">existing groups</h3>
					if state.Groups.Size() == 0 {
						<p class="text-sm text-stone-600 dark:text-stone-400">no groups created yet</p>
					} else {
						<div class="overflow-x-auto">
							<table class="min-w-full divide-y divide-stone-200 dark:divide-stone-700">
								<thead class="bg-stone-50 dark:bg-stone-800">
									<tr>
										<th class="px-4 py-3 text-xs font-medium text-stone-500 dark:text-stone-400 uppercase tracking-wider">group</th>
										<th class="px-4 py-3 text-xs font-medium text-stone-500 dark:text-stone-400 uppercase tracking-wider">members</th>
										<th class="px-4 py-3 text-xs font-medium text-stone-500 dark:text-stone-400 uppercase tracking-wider">moderators</th>
										<th class="px-4 py-3 text-xs font-medium text-stone-500 dark:text-stone-400 uppercase tracking-wider">closed</th>
										<th class="px-4 py-3 text-xs font-medium text-stone-500 dark:text-stone-400 uppercase tracking-wider">private</th>
									</tr>
								</thead>
								<tbody class="bg-white dark:bg-stone-900 divide-y divide-stone-200 dark:divide-stone-700">
									for _, group := range state.Groups.Range {
										if loggedUser == global.Master || !group.Private {
											<tr>
												<td class="px-4 py-3 text-sm text-center">
													<span
														class="font-medium text-stone-900 dark:text-stone-100"
														title={ group.About }
													>{ group.Name }</span>
												</td>
												<td class="px-4 py-3 text-sm text-center text-stone-600 dark:text-stone-400">{ fmt.Sprint(len(group.Members)) }</td>
												<td class="px-4 py-3 text-sm text-center">
													<div class="space-y-1">
														for pubkey, roles := range group.Members {
															if len(roles) > 0 {
																<div class="flex items-center gap-2">
																	<nostr-name pubkey={ pubkey.Hex() } class="text-stone-700 dark:text-stone-300">{ pubkey.Hex() }</nostr-name>
																	<span class="text-xs text-stone-500 dark:text-stone-500">
																		(
																		for i, role := range roles {
																			if i > 0 {
																				,
																			}
																			{ role.Name }
																		}
																		)
																	</span>
																</div>
															}
														}
													</div>
												</td>
												<td class="px-4 py-3 text-sm text-center">
													if group.Closed {
														☑
													} else {
														☐
													}
												</td>
												<td class="px-4 py-3 text-sm text-center">
													if group.Private {
														☑
													} else {
														☐
													}
												</td>
											</tr>
										}
									}
								</tbody>
							</table>
						</div>
					}
				</div>
			}
			// create new group form - visible for all logged relay members
			if loggedUser != nostr.ZeroPK {
				<div
					class="mt-8"
					x-data="{
							groupName: '',
							description: '',
							imageUrl: '',
							closed: false,
							private: false,
							creating: false,
							async createGroup() {
								if (!window.nostr) {
									alert('nostr extension not found');
									return;
								}

								if (!this.groupName.trim()) {
									alert('group name is required');
									return;
								}

								try {
									creating = true;

									let groupId = ''
									for (groupId = ''; groupId.length < 10;) groupId += '23456789cfghjmpqrvwx'[(Math.random() * 20) | 0];

									// create-group event
									await this.publishEvent(await window.nostr.signEvent({
										kind: 9007,
										created_at: Math.floor(Date.now() / 1000),
										tags: [
											['h', groupId]
										],
										content: ''
									}));

									// edit-metadata event
									const metadataContent = JSON.stringify({
									});

									await this.publishEvent(await window.nostr.signEvent({
										kind: 9002,
										created_at: Math.floor(Date.now() / 1000),
										tags: [
											['h', groupId],
											['name', this.groupName],
											...(this.description ? [['about', this.description]] : []),
											...(this.imageUrl ? [['picture', this.imageUrl]] : []),
											...(this.closed ? [['closed']] : [['open']]),
											...(this.private ? [['private']] : [['public']])
										],
										content: ''
									}));

									alert('group created successfully!');
									window.location.reload();
								} catch (error) {
									console.error('error creating group:', error);
									alert('failed to create group: ' + error.message);
								} finally {
									creating = false
								}
							},
							async publishEvent(event) {
								return new Promise((resolve, reject) => {
									const ws = new WebSocket(window.location.href.replace('ws', 'http'));
									let timeout = setTimeout(() => {
										ws.close();
										reject(new Error('timeout waiting for relay response'));
									}, 5000);

									ws.onopen = () => {
										ws.send(JSON.stringify(['EVENT', event]));
									};

									ws.onmessage = async (msg) => {
										const message = JSON.parse(msg.data);
										switch (message[0]) {
											case 'OK': {
												if (message[3].startsWith('auth-required:')) {
													await new Promise(resolve => setTimeout(resolve, 500));
													ws.send(JSON.stringify(['EVENT', event]));
												} else if (message[2] === true && message[1] === event.id) {
													resolve();
													clearTimeout(timeout);
													ws.onmessage = null
													ws.close();
												} else if (message[2] === false) {
													reject(new Error(message[3] || 'event rejected by relay'));
													clearTimeout(timeout);
													ws.onmessage = null
													ws.close();
												}
												break;
											}
											case 'AUTH': {
												ws.send(JSON.stringify(['AUTH', await window.nostr.signEvent({
													created_at: Math.round(Date.now() / 1000),
													kind: 22242,
													content: '',
													tags: [
														['relay', window.location.href
															.replace('http://', 'https://')
															.replace('http', 'ws')
														],
														['challenge', message[1]]
													]
												})]));
												break;
											}
										}
									};

									ws.onerror = () => {
										clearTimeout(timeout);
										ws.close();
										reject(new Error('websocket connection error'));
									};
								});
							}
						}"
				>
					<h3 class="text-lg font-semibold mb-4 dark:text-stone-200">create new group</h3>
					<form
						class="space-y-6"
						@submit.prevent="createGroup()"
					>
						<div class="space-y-4">
							<div>
								<label for="group_name" class="block text-sm font-medium text-stone-700 dark:text-stone-300 mb-1">
									group name <span class="text-red-500">*</span>
								</label>
								<input
									type="text"
									id="group_name"
									name="group_name"
									x-model="groupName"
									required
									class="w-full px-3 py-2 border border-stone-300 dark:border-stone-600 rounded-lg bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100 focus:outline-none focus:ring-2 focus:ring-stone-500"
								/>
							</div>
							<div>
								<label for="group_description" class="block text-sm font-medium text-stone-700 dark:text-stone-300 mb-1">
									description
								</label>
								<textarea
									id="group_description"
									name="description"
									x-model="description"
									rows="2"
									class="w-full px-3 py-2 border border-stone-300 dark:border-stone-600 rounded-lg bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100 focus:outline-none focus:ring-2 focus:ring-stone-500"
								></textarea>
							</div>
							<div>
								<label for="group_image" class="block text-sm font-medium text-stone-700 dark:text-stone-300 mb-1">
									image url
								</label>
								<input
									type="url"
									id="group_image"
									name="image_url"
									x-model="imageUrl"
									class="w-full px-3 py-2 border border-stone-300 dark:border-stone-600 rounded-lg bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100 focus:outline-none focus:ring-2 focus:ring-stone-500"
								/>
							</div>
						</div>
						<div class="space-y-3">
							<div class="flex items-center">
								<input
									type="checkbox"
									id="group_closed"
									name="closed"
									x-model="closed"
									@change="if (!closed) private = false"
									class="h-4 w-4 rounded border-stone-300 text-stone-600 focus:ring-stone-500"
								/>
								<label for="group_closed" class="ml-2 text-sm text-stone-700 dark:text-stone-300">
									closed (only invited users can join)
								</label>
							</div>
							<div class="flex items-center">
								<input
									type="checkbox"
									id="group_private"
									name="private"
									x-model="private"
									@change="if (private) closed = true"
									class="h-4 w-4 rounded border-stone-300 text-stone-600 focus:ring-stone-500"
								/>
								<label for="group_private" class="ml-2 text-sm text-stone-700 dark:text-stone-300">
									private (only members can read)
								</label>
							</div>
						</div>
						<button
							type="submit"
							class="px-4 py-2 rounded bg-stone-200 hover:bg-stone-300 dark:bg-stone-700 dark:hover:bg-stone-600 text-stone-700 dark:text-stone-300 font-medium"
							:disabled="creating"
						>
							create group
						</button>
					</form>
				</div>
			}
		</div>
	}
}
