package groups

import (
	"fiatjaf.com/nostr"
	"fmt"
	"github.com/fiatjaf/pyramid/global"
)

templ groupsPage(loggedUser nostr.PubKey, state *State) {
	@global.Layout(loggedUser, "groups") {
		<div class="max-w-3xl mx-auto">
			<div class="space-y-4 text-gray-700 dark:text-gray-300">
				<p class="text-lg leading-relaxed">
					the groups relay implements NIP-29: moderated group chat functionality.
				</p>
				<div class="bg-blue-50/50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4">
					<h2 class="font-semibold text-gray-800 dark:text-gray-100 mb-2">how it works:</h2>
					<ul class="list-disc list-inside space-y-1 text-sm">
						<li>members can create groups</li>
						<li>group policies are provided at creation time</li>
						<li>as long as the group creator allows, non-members can join these groups freely</li>
					</ul>
				</div>
			</div>
			if loggedUser == global.Master {
				<div class="mt-8">
					<h3 class="text-lg font-semibold mb-4 dark:text-stone-200">groups configuration</h3>
					if global.Settings.GroupsPrivateKey == "" {
						<p class="text-sm text-stone-600 dark:text-stone-400 mb-4">
							groups functionality is currently disabled. click the button below to generate a secret key and enable groups.
						</p>
						<form method="POST" action="/groups/enable">
							<button
								type="submit"
								class="px-6 py-2 rounded-lg font-semibold bg-stone-700 hover:bg-stone-800 dark:bg-stone-600 dark:hover:bg-stone-500 text-white shadow-md hover:shadow-lg"
							>
								enable groups
							</button>
						</form>
					} else {
						<form
							method="POST"
							action="/settings"
							class="space-y-4"
							x-data={ `{
								primaryRole: '` + global.Settings.GroupsDefaultPrimaryRole + `',
								secondaryRole: '` + global.Settings.GroupsDefaultSecondaryRole + `',
								saved: false,
								async saveSettings() {
									const response = await fetch('/settings', {
										method: 'POST',
										body: new URLSearchParams(new FormData(this.$refs.form))
									});
									if (response.ok) {
										this.saved = true;
										setTimeout(() => this.saved = false, 2000);
									}
								}
							}` }
							x-ref="form"
						>
							<div>
								<label for="groups_default_primary_role" class="block text-sm font-medium text-stone-700 dark:text-stone-300 mb-1">
									default primary role
								</label>
								<input
									type="text"
									id="groups_default_primary_role"
									name="groups_default_primary_role"
									class="w-full px-3 py-2 border border-stone-300 dark:border-stone-600 rounded-lg bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100 focus:outline-none focus:ring-2 focus:ring-stone-500"
									x-model="primaryRole"
									@blur="saveSettings()"
									required
								/>
							</div>
							<div>
								<label for="groups_default_secondary_role" class="block text-sm font-medium text-stone-700 dark:text-stone-300 mb-1">
									default secondary role
								</label>
								<input
									type="text"
									id="groups_default_secondary_role"
									name="groups_default_secondary_role"
									class="w-full px-3 py-2 border border-stone-300 dark:border-stone-600 rounded-lg bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100 focus:outline-none focus:ring-2 focus:ring-stone-500"
									x-model="secondaryRole"
									@blur="saveSettings()"
									required
								/>
							</div>
							<div
								x-show="saved"
								x-transition
								class="text-sm text-green-600 dark:text-green-400 font-medium"
							>
								saved!
							</div>
						</form>
					}
				</div>
			}
			// groups table section
			if loggedUser == global.Master && state != nil {
				<div class="mt-8">
					<h3 class="text-lg font-semibold mb-4 dark:text-stone-200">existing groups</h3>
					if state.Groups.Size() == 0 {
						<p class="text-sm text-stone-600 dark:text-stone-400">no groups created yet</p>
					} else {
						<div class="overflow-x-auto">
							<table class="min-w-full divide-y divide-stone-200 dark:divide-stone-700">
								<thead class="bg-stone-50 dark:bg-stone-800">
									<tr>
										<th class="px-4 py-3 text-left text-xs font-medium text-stone-500 dark:text-stone-400 uppercase tracking-wider">group</th>
										<th class="px-4 py-3 text-left text-xs font-medium text-stone-500 dark:text-stone-400 uppercase tracking-wider">members</th>
										<th class="px-4 py-3 text-left text-xs font-medium text-stone-500 dark:text-stone-400 uppercase tracking-wider">moderators</th>
									</tr>
								</thead>
								<tbody class="bg-white dark:bg-stone-900 divide-y divide-stone-200 dark:divide-stone-700">
									for _, group := range state.Groups.Range {
										<tr>
											<td class="px-4 py-3 text-sm">
												<span
													class="font-medium text-stone-900 dark:text-stone-100"
													if group.About != "" {
														title={ group.About }
													}
												>{ group.Name }</span>
											</td>
											<td class="px-4 py-3 text-sm text-stone-600 dark:text-stone-400">{ fmt.Sprint(len(group.Members)) }</td>
											<td class="px-4 py-3 text-sm">
												<div class="space-y-1">
													for pubkey, roles := range group.Members {
														if len(roles) > 0 {
															<div class="flex items-center gap-2">
																<nostr-name pubkey={ pubkey.Hex() } class="text-stone-700 dark:text-stone-300">{ pubkey.Hex() }</nostr-name>
																<span class="text-xs text-stone-500 dark:text-stone-500">
																	(
																	for i, role := range roles {
																		if i > 0 {
																			, 
																		}
																		{ role.Name }
																	}
																	)
																</span>
															</div>
														}
													}
												</div>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
				</div>
			}
		</div>
	}
}
